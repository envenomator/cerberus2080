ca65 V2.19 - Git fcda94f25
Main file   : src/console.s
Current file: src/console.s

000000r 1                   .setcpu "65C02"
000000r 1               
000000r 1               VIDSTART = $F800
000000r 1               SCREENWIDTH  = 40
000000r 1               SCREENHEIGHT = 30
000000r 1               
000000r 1                   .exportzp xpos,ypos,conptr
000000r 1                   .export  _con_putc, _con_puts, _con_getc
000000r 1                   .export  _con_init, _con_cls, _con_gotoxy
000000r 1                   .globalzp sp
000000r 1                   .import popa,popax,incsp2,decsp2
000000r 1               
000000r 1                   .zeropage
000000r 1  xx           xpos:    .res 1
000001r 1  xx           ypos:    .res 1
000002r 1  xx xx        conptr:  .res 2
000004r 1  xx xx        strptr:  .res 2
000006r 1               
000006r 1                   .code
000000r 1               
000000r 1               .proc _con_puts: near
000000r 1                   ; C __fastcall__ A/X ptr to print
000000r 1  85 rr            sta strptr
000002r 1  86 rr            stx strptr+1
000004r 1  20 rr rr         jsr con_print
000007r 1  60               rts
000008r 1               .endproc
000008r 1               
000008r 1               .proc _con_init: near
000008r 1               _con_init:
000008r 1                   ; C COMPLIANT
000008r 1                   ; initializes the console variables
000008r 1                   ; reset to X,Y = 0,0
000008r 1  48               pha
000009r 1  DA               phx
00000Ar 1  5A               phy
00000Br 1  64 rr            stz xpos
00000Dr 1  64 rr            stz ypos
00000Fr 1  A9 00            lda #<VIDSTART
000011r 1  85 rr            sta conptr
000013r 1  A9 F8            lda #>VIDSTART
000015r 1  85 rr            sta conptr+1
000017r 1  7A               ply
000018r 1  FA               plx
000019r 1  68               pla
00001Ar 1  60               rts
00001Br 1               .endproc
00001Br 1               
00001Br 1               .proc _con_cls: near
00001Br 1               _con_cls:
00001Br 1                   ; C COMPLIANT
00001Br 1                   ; Fill the entire screen with empty tile (space)
00001Br 1                   ; and reset console to 0,0
00001Br 1  48               pha
00001Cr 1  DA               phx
00001Dr 1  5A               phy
00001Er 1  20 rr rr         jsr _con_init
000021r 1               
000021r 1  A2 00            ldx #$0
000023r 1               @outer:
000023r 1  A9 20            lda #' '            ; space character
000025r 1  A0 00            ldy #$0
000027r 1               @inner:
000027r 1  91 rr            sta (conptr),y
000029r 1  C8               iny
00002Ar 1  C0 28            cpy #SCREENWIDTH
00002Cr 1  D0 F9            bne @inner          ; next column
00002Er 1  18               clc
00002Fr 1  A5 rr            lda conptr
000031r 1  69 28            adc #SCREENWIDTH             ; next row
000033r 1  85 rr            sta conptr
000035r 1  90 06            bcc @next
000037r 1  A5 rr            lda conptr+1
000039r 1  69 00            adc #$0             ; add the carry (1) to the high byte
00003Br 1  85 rr            sta conptr+1
00003Dr 1               @next:
00003Dr 1  E8               inx
00003Er 1  E0 1E            cpx #SCREENHEIGHT
000040r 1  D0 E1            bne @outer
000042r 1               
000042r 1  20 rr rr         jsr _con_init
000045r 1  7A               ply
000046r 1  FA               plx
000047r 1  68               pla
000048r 1  60               rts
000049r 1               .endproc
000049r 1               
000049r 1               .proc _con_gotoxy
000049r 1                   ; C compliant code
000049r 1  48               pha         ; Y argument
00004Ar 1  A0 00            ldy #0
00004Cr 1  B1 rr            lda (sp),y  ; X argument from the stack - unsigned char
00004Er 1  AA               tax         ; X argument in register x
00004Fr 1  7A               ply
000050r 1  20 rr rr         jsr con_gotoxy
000053r 1  20 rr rr         jsr popa    ; stack cleanup
000056r 1  60               rts
000057r 1               .endproc
000057r 1               
000057r 1               .proc _con_putc
000057r 1                   ; C compliant code - fastcalled
000057r 1                   ; A register contains character to put
000057r 1  20 rr rr         jsr con_printchar
00005Ar 1  60               rts
00005Br 1               .endproc
00005Br 1               
00005Br 1               con_gotox:
00005Br 1                   ; Assembly only call
00005Br 1  48               pha
00005Cr 1  DA               phx
00005Dr 1  5A               phy
00005Er 1  A4 rr            ldy ypos
000060r 1  20 rr rr         jsr _con_gotoxy
000063r 1  7A               ply
000064r 1  FA               plx
000065r 1  68               pla
000066r 1  60               rts
000067r 1               
000067r 1               con_gotoxy:
000067r 1                   ; Assembly only call
000067r 1                   ; input .x == x position
000067r 1                   ; input .y == y position
000067r 1  48               pha
000068r 1  DA               phx
000069r 1  5A               phy
00006Ar 1  E0 28            cpx #SCREENWIDTH
00006Cr 1  B0 2B            bcs @done           ; >= to WIDTH, set carry and exit
00006Er 1  C0 1E            cpy #SCREENHEIGHT
000070r 1  B0 27            bcs @done           ; >= to HEIGHT, set carry and exit
000072r 1  86 rr            stx xpos
000074r 1  84 rr            sty ypos
000076r 1               
000076r 1  A9 28            lda #SCREENWIDTH
000078r 1  85 rr            sta conptr      ; FAC1 == conptr(low), FAC2 = ypos. FAC1 gets clobbered to final low byte of result
00007Ar 1                   ; multiply ypos * SCREENWIDTH, store in conptr
00007Ar 1               @mul8:
00007Ar 1  A9 00            lda #$00
00007Cr 1  A2 08            ldx #$08
00007Er 1  18               clc
00007Fr 1               @m0:
00007Fr 1  90 03            bcc @m1
000081r 1  18               clc
000082r 1  65 rr            adc ypos
000084r 1               @m1:
000084r 1  6A               ror
000085r 1  66 rr            ror conptr
000087r 1  CA               dex
000088r 1  10 F5            bpl @m0
00008Ar 1  85 rr            sta conptr+1
00008Cr 1                   ; result now in conptr / conptr+1
00008Cr 1                   ; Add both video start address (F800) and xpos to conptr.
00008Cr 1                   ; As xpos <40, we can use the low byte immediately
00008Cr 1  18               clc
00008Dr 1  A5 rr            lda conptr
00008Fr 1  65 rr            adc xpos
000091r 1  85 rr            sta conptr
000093r 1  A5 rr            lda conptr+1
000095r 1  69 F8            adc #$F8
000097r 1  85 rr            sta conptr+1
000099r 1               @done:
000099r 1  7A               ply
00009Ar 1  FA               plx
00009Br 1  68               pla
00009Cr 1  60               rts
00009Dr 1               
00009Dr 1               _con_getc:
00009Dr 1                   ; C COMPLIANT
00009Dr 1  AD 00 02         lda $0200           ; mail flag
0000A0r 1  C9 01            cmp #$01            ; character received?
0000A2r 1  D0 F9            bne _con_getc       ; blocked wait for character
0000A4r 1  9C 00 02         stz $0200  ; acknowledge receive
0000A7r 1  AD 01 02         lda $0201  ; receive the character from the mailbox slot
0000AAr 1  A2 00            ldx #$0    ; 16-bit promotion of high-byte as return value to C
0000ACr 1  60               rts
0000ADr 1               
0000ADr 1               con_print:
0000ADr 1                   ; Assembly only call
0000ADr 1                   ; prints zero-terminated string pointed to by strptr in zeropage
0000ADr 1  48               pha
0000AEr 1  DA               phx
0000AFr 1  5A               phy
0000B0r 1               
0000B0r 1  A0 00            ldy #0
0000B2r 1               @loop:
0000B2r 1  B1 rr            lda (strptr),y
0000B4r 1  F0 06            beq @done
0000B6r 1  20 rr rr         jsr con_printchar
0000B9r 1  C8               iny
0000BAr 1  80 F6            bra @loop
0000BCr 1               @done:
0000BCr 1  7A               ply
0000BDr 1  FA               plx
0000BEr 1  68               pla
0000BFr 1  60               rts
0000C0r 1               
0000C0r 1               con_printchar:
0000C0r 1                   ; Assembly only call
0000C0r 1                   ; prints character from A to the current X,Y coordinate in zeropage
0000C0r 1                   ; X,Y is always a previously checked valid coordinate
0000C0r 1  48               pha
0000C1r 1  DA               phx
0000C2r 1  5A               phy
0000C3r 1               
0000C3r 1  C9 0D            cmp #$d ; CR
0000C5r 1  F0 15            beq @CRLF
0000C7r 1  C9 0A            cmp #$a ; LF
0000C9r 1  F0 11            beq @CRLF
0000CBr 1               
0000CBr 1                   ; print normally
0000CBr 1  A0 00            ldy #0
0000CDr 1  91 rr            sta (conptr),y
0000CFr 1                   ; update position and check validity
0000CFr 1                   ; wrap around at end of screen to 0,0
0000CFr 1                   ; X = X + 1
0000CFr 1  A5 rr            lda xpos
0000D1r 1  C9 27            cmp #SCREENWIDTH-1
0000D3r 1  F0 07            beq @CRLF
0000D5r 1  18               clc
0000D6r 1  69 01            adc #1
0000D8r 1  85 rr            sta xpos
0000DAr 1  80 21            bra @nextptr
0000DCr 1               @CRLF:
0000DCr 1  A9 28            lda #SCREENWIDTH
0000DEr 1  38               sec
0000DFr 1  E5 rr            sbc xpos            ; move down SCREENWIDTH - xpos characters
0000E1r 1  18               clc
0000E2r 1  65 rr            adc conptr          ; add to low byte of pointer
0000E4r 1  85 rr            sta conptr
0000E6r 1  A5 rr            lda conptr+1
0000E8r 1  69 00            adc #0
0000EAr 1  85 rr            sta conptr+1        ; add to high byte of pointer
0000ECr 1               
0000ECr 1                   ; now reset x and check y next
0000ECr 1  64 rr            stz xpos
0000EEr 1  A5 rr            lda ypos
0000F0r 1  C9 1D            cmp #SCREENHEIGHT-1
0000F2r 1  D0 05            bne @nextrow
0000F4r 1                   ; return to 0,0
0000F4r 1  20 rr rr         jsr _con_init
0000F7r 1  80 13            bra @done
0000F9r 1               @nextrow:
0000F9r 1  E6 rr            inc ypos
0000FBr 1  80 0F            bra @done
0000FDr 1               @nextptr:
0000FDr 1  A5 rr            lda conptr
0000FFr 1  18               clc
000100r 1  69 01            adc #1
000102r 1  85 rr            sta conptr
000104r 1  90 06            bcc @done
000106r 1  A5 rr            lda conptr+1
000108r 1  69 00            adc #0
00010Ar 1  85 rr            sta conptr+1
00010Cr 1               @done:
00010Cr 1  7A               ply
00010Dr 1  FA               plx
00010Er 1  68               pla
00010Fr 1  60               rts
00010Fr 1               
