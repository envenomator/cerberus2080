ca65 V2.19 - Git fcda94f25
Main file   : src/main.s
Current file: src/main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git fcda94f25
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git fcda94f25"
000000r 1               	.setcpu		"65C02"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_con_init
000000r 1               	.import		_con_cls
000000r 1               	.import		_con_putc
000000r 1               	.import		_con_gotoxy
000000r 1               	.import		_con_getc
000000r 1               	.import		_banner
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; int __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp3
000003r 1  20 rr rr     	jsr     _con_init
000006r 1  20 rr rr     	jsr     _con_cls
000009r 1  A9 09        	lda     #$09
00000Br 1  20 rr rr     	jsr     pusha
00000Er 1  1A           	ina
00000Fr 1  20 rr rr     	jsr     _con_gotoxy
000012r 1  20 rr rr     	jsr     _banner
000015r 1  A2 00        	ldx     #$00
000017r 1  8A           	txa
000018r 1  A0 01        	ldy     #$01
00001Ar 1  20 rr rr     	jsr     staxysp
00001Dr 1  A0 02        L0002:	ldy     #$02
00001Fr 1  20 rr rr     	jsr     ldaxysp
000022r 1  C9 28        	cmp     #$28
000024r 1  8A           	txa
000025r 1  E9 00        	sbc     #$00
000027r 1  50 02        	bvc     L0006
000029r 1  49 80        	eor     #$80
00002Br 1  0A           L0006:	asl     a
00002Cr 1  A2 00        	ldx     #$00
00002Er 1  90 2B        	bcc     L0013
000030r 1  A0 01        	ldy     #$01
000032r 1  B1 rr        	lda     (sp),y
000034r 1  20 rr rr     	jsr     pusha
000037r 1  8A           	txa
000038r 1  20 rr rr     	jsr     _con_gotoxy
00003Br 1  A9 78        	lda     #$78
00003Dr 1  20 rr rr     	jsr     _con_putc
000040r 1  A0 01        	ldy     #$01
000042r 1  B1 rr        	lda     (sp),y
000044r 1  20 rr rr     	jsr     pusha
000047r 1  A9 1D        	lda     #$1D
000049r 1  20 rr rr     	jsr     _con_gotoxy
00004Cr 1  A9 78        	lda     #$78
00004Er 1  20 rr rr     	jsr     _con_putc
000051r 1  A0 01        	ldy     #$01
000053r 1  A2 00        	ldx     #$00
000055r 1  98           	tya
000056r 1  20 rr rr     	jsr     addeqysp
000059r 1  80 C2        	bra     L0002
00005Br 1  A9 01        L0013:	lda     #$01
00005Dr 1  A8           	tay
00005Er 1  20 rr rr     	jsr     staxysp
000061r 1  A0 02        L0007:	ldy     #$02
000063r 1  20 rr rr     	jsr     ldaxysp
000066r 1  C9 1D        	cmp     #$1D
000068r 1  8A           	txa
000069r 1  E9 00        	sbc     #$00
00006Br 1  50 02        	bvc     L000B
00006Dr 1  49 80        	eor     #$80
00006Fr 1  0A           L000B:	asl     a
000070r 1  A9 00        	lda     #$00
000072r 1  AA           	tax
000073r 1  2A           	rol     a
000074r 1  F0 2B        	beq     L000C
000076r 1  8A           	txa
000077r 1  20 rr rr     	jsr     pusha
00007Ar 1  A0 02        	ldy     #$02
00007Cr 1  B1 rr        	lda     (sp),y
00007Er 1  20 rr rr     	jsr     _con_gotoxy
000081r 1  A9 78        	lda     #$78
000083r 1  20 rr rr     	jsr     _con_putc
000086r 1  A9 27        	lda     #$27
000088r 1  20 rr rr     	jsr     pusha
00008Br 1  A0 02        	ldy     #$02
00008Dr 1  B1 rr        	lda     (sp),y
00008Fr 1  20 rr rr     	jsr     _con_gotoxy
000092r 1  A9 78        	lda     #$78
000094r 1  20 rr rr     	jsr     _con_putc
000097r 1  A0 01        	ldy     #$01
000099r 1  A2 00        	ldx     #$00
00009Br 1  98           	tya
00009Cr 1  20 rr rr     	jsr     addeqysp
00009Fr 1  80 C0        	bra     L0007
0000A1r 1  20 rr rr     L000C:	jsr     _con_getc
0000A4r 1  92 rr        	sta     (sp)
0000A6r 1  A9 14        	lda     #$14
0000A8r 1  20 rr rr     	jsr     pusha
0000ABr 1  20 rr rr     	jsr     _con_gotoxy
0000AEr 1  B2 rr        	lda     (sp)
0000B0r 1  20 rr rr     	jsr     _con_putc
0000B3r 1  80 EC        	bra     L000C
0000B5r 1               
0000B5r 1               .endproc
0000B5r 1               
0000B5r 1               
